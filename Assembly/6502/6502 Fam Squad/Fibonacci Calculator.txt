; Hannah Ahn
; Aidan Glickman
; Gregory Latronica


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constant values
;
define n            $0B                ; Input "n" parameter


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Addresses
;
define ans_addr                  $00  ; Final answer will be stored at $0001. 
define temp_addr                $02  ; Temporary values can be stored at $0002.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Main Program
; -- Push n onto the stack
; -- Call function fib
; -- The pop the result from the stack and store it in ans_addr
LDA #n
PHA 
JSR fib
PLA ; get result
STA ans_addr
BRK


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; fib(n) = fib(n-1) + fib(n-2)
; fib(0) = 0
; fib(1) = 1
; 
fib: 


TSX
        TXA
        CLC
        ADC #$03
        TAY
        LDA $0100, Y  ;Loads n into accumulator
        STA temp_addr
        BEQ base ; jumps to base0 if input is zero
        
        SEC
        SBC #$01
        BEQ base ;jumps to base1 if input is 1


        PHA ; pushes n-1 to the stack
        JSR fib ; finds fib(n-1)


        TSX
        TXA
        CLC
        ADC #$04
        TAY
        LDA $0100, Y  ;Loads n into accumulator


        SEC
        SBC #$02
        PHA
        JSR fib ;pushes n-2 onto stack and finds fib(n-2)


        PLA
        STA temp_addr
        PLA
        CLC
        ADC temp_addr ; adds fib(n-1) and fib(n-2)


        JMP merged_code ; goes to shared merged code






base:
        LDA temp_addr; sets fib(0) = 0 & f(1) = 1


merged_code:
        STA temp_addr
        TSX
        TXA
        CLC
        ADC #$03
        TAY
        LDA temp_addr
        STA $0100, Y ; stores answer on the stack :-)


        RTS ; return from subroutine